generator client {
  provider = "prisma-client-js"
}

generator erd {
  provider = "prisma-erd-generator"
  output   = "../docs/erd.svg"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum AuthType {
  EMAIL
  FIREBASE
}

model User {
  id           String   @id @default(uuid()) @db.Uuid
  email        String   @unique
  authType     AuthType
  password     String?
  role         Role     @default(USER)
  isVerified   Boolean  @default(false)
  tokenVersion Int      @default(0)

  profile Profile?
  calorie CalorieEntry[]
  water   WaterEntry[]
  step    StepEntry[]
  fasting FastingEntry[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Profile {
  id          Int      @id @default(autoincrement())
  name        String
  dateOfBirth DateTime
  gender      String
  heightCm    Int
  weightKg    Int
  bloodType   String

  userId String @unique @db.Uuid
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum MealType {
  BREAKFAST
  LUNCH
  DINNER
  SNACK
}

model CalorieEntry {
  id             Int      @id @default(autoincrement())
  date           DateTime @default(now())
  food           String
  mealType       MealType
  energyKcal     Int
  proteinGr      Int
  carbohydrateGr Int
  fatGr          Int
  sugarGr        Int
  sodiumMg       Int

  userId String @db.Uuid
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, date, food])
}

model WaterEntry {
  id       Int      @id @default(autoincrement())
  date     DateTime @default(now())
  amountMl Int

  userId String @db.Uuid
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, date])
}

model StepEntry {
  id    Int      @id @default(autoincrement())
  date  DateTime @default(now())
  steps Int

  userId String @db.Uuid
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, date])
}

model FastingEntry {
  id        Int      @id @default(autoincrement())
  startTime DateTime
  endTime   DateTime
  durationH Float

  userId String @db.Uuid
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum VerificationAction {
  SIGNUP
  RESET_PASSWORD
}

model PendingVerification {
  id     Int                @id @default(autoincrement())
  email  String             @unique
  code   String
  action VerificationAction

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
