generator client {
  provider = "prisma-client-js"
}

generator erd {
  provider = "prisma-erd-generator"
  output   = "../docs/erd.svg"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  user
  admin
}

enum AuthType {
  email
  firebase
}

model User {
  id           String   @id @default(uuid()) @db.Uuid
  email        String   @unique
  authType     AuthType
  password     String?
  role         Role     @default(user)
  isVerified   Boolean  @default(false)
  tokenVersion Int      @default(0)
  fcmToken     String?  @unique
  xp           Int      @default(0)

  profile       Profile?
  calorie       CalorieHeader[]
  calorieEntry  CalorieEntry[]
  calorieTarget CalorieTarget[]
  water         WaterEntry[]
  waterTarget   WaterTarget[]
  step          StepEntry[]
  stepTarget    StepTarget[]
  fasting       FastingEntry[]
  weight        WeightEntry[]
  challengeSubs ChallengeSubscription[]

  connectionA UserConnection[] @relation("UserConnectionA")
  connectionB UserConnection[] @relation("UserConnectionB")

  connectionRequestA ConnectionRequest[] @relation("ConnectionRequestA")
  connectionRequestB ConnectionRequest[] @relation("ConnectionRequestB")

  changeEmailVerificationAction ChangeEmailVerificationAction[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Gender {
  male
  female
}

enum MainGoal {
  weightLoss
  stayFit
  buildMuscle
}

enum ActivityLevel {
  low
  medium
  high
  veryHigh
}

model Profile {
  id             String        @id @default(uuid()) @db.Uuid
  name           String
  gender         Gender
  mainGoal       MainGoal
  age            Int
  heightCm       Int
  weightKg       Int
  weightTargetKg Int
  activityLevel  ActivityLevel

  userId String @unique @db.Uuid
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum MealType {
  breakfast
  lunch
  dinner
  snack
}

model CalorieTarget {
  id         String @id @default(uuid()) @db.Uuid
  energyKcal Int

  userId String @db.Uuid
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  headers CalorieHeader[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model CalorieHeader {
  id   String   @id @default(uuid()) @db.Uuid
  date DateTime

  userId String @db.Uuid
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  targetId String        @db.Uuid
  target   CalorieTarget @relation(fields: [targetId], references: [id], onDelete: Cascade)

  entries CalorieEntry[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@unique([userId, date])
}

model CalorieEntry {
  id             String   @id @default(uuid()) @db.Uuid
  date           DateTime
  food           String
  portion        Float
  mealType       MealType
  energyKcal     Int
  proteinGr      Int
  carbohydrateGr Int
  fatGr          Int
  sugarGr        Int
  sodiumMg       Int

  userId String @db.Uuid
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  headerId String        @db.Uuid
  header   CalorieHeader @relation(fields: [headerId], references: [id], onDelete: Cascade)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model WaterTarget {
  id       String @id @default(uuid()) @db.Uuid
  amountMl Int

  userId String @db.Uuid
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  entries WaterEntry[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model WaterEntry {
  id       String   @id @default(uuid()) @db.Uuid
  date     DateTime
  amountMl Int

  userId String @db.Uuid
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  targetId String      @db.Uuid
  target   WaterTarget @relation(fields: [targetId], references: [id], onDelete: Cascade)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@unique([userId, date])
}

model StepTarget {
  id    String @id @default(uuid()) @db.Uuid
  steps Int

  userId String @db.Uuid
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  entries StepEntry[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model StepEntry {
  id            String   @id @default(uuid()) @db.Uuid
  date          DateTime @default(now())
  steps         Int
  distanceKm    Float
  activeMinutes Int

  userId String @db.Uuid
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  targetId String     @db.Uuid
  target   StepTarget @relation(fields: [targetId], references: [id], onDelete: Cascade)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@unique([userId, date])
}

enum FastingCategory {
  fast16eat08
  fast18eat06
  fast14eat10
  fast12eat12
  fast13eat11
  fast15eat09
  custom
}

model FastingEntry {
  id         String          @id @default(uuid()) @db.Uuid
  category   FastingCategory
  startTime  DateTime
  endTime    DateTime
  finishedAt DateTime?

  userId String @db.Uuid
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model WeightEntry {
  id       String   @id @default(uuid()) @db.Uuid
  date     DateTime
  weightKg Int

  userId String @db.Uuid
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

enum ChallengeCategory {
  workout
  food
  fast
}

model Challenge {
  id          String            @id @default(uuid()) @db.Uuid
  title       String
  description String
  category    ChallengeCategory

  tasks ChallengeTask[]
  subs  ChallengeSubscription[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model ChallengeTask {
  id          String @id @default(uuid()) @db.Uuid
  description String
  day         Int

  challengeId String    @db.Uuid
  challenge   Challenge @relation(fields: [challengeId], references: [id], onDelete: Cascade)

  finished FinishedChallengeTask[]
}

model ChallengeSubscription {
  id        String   @id @default(uuid()) @db.Uuid
  startDate DateTime
  finished  Boolean  @default(false)

  challengeId String    @db.Uuid
  challenge   Challenge @relation(fields: [challengeId], references: [id], onDelete: Cascade)

  userId String @db.Uuid
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  finishedTasks FinishedChallengeTask[]
}

model FinishedChallengeTask {
  id String @id @default(uuid()) @db.Uuid

  subId String                @db.Uuid
  sub   ChallengeSubscription @relation(fields: [subId], references: [id], onDelete: Cascade)

  taskId String        @db.Uuid
  task   ChallengeTask @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@unique([subId, taskId])
}

model UserConnection {
  id String @id @default(uuid()) @db.Uuid

  aId String @db.Uuid
  a   User   @relation("UserConnectionA", fields: [aId], references: [id], onDelete: Cascade)

  bId String @db.Uuid
  b   User   @relation("UserConnectionB", fields: [bId], references: [id], onDelete: Cascade)

  @@unique([aId, bId])
}

model ConnectionRequest {
  id String @id @default(uuid()) @db.Uuid

  fromId String @db.Uuid
  from   User   @relation("ConnectionRequestA", fields: [fromId], references: [id], onDelete: Cascade)

  toId String @db.Uuid
  to   User   @relation("ConnectionRequestB", fields: [toId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@unique([fromId, toId])
}

enum VerificationAction {
  signup
  resetPassword
  changeEmail
}

model PendingVerification {
  id     String             @id @default(uuid()) @db.Uuid
  email  String             @unique
  code   String
  action VerificationAction

  changeEmailAction ChangeEmailVerificationAction[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ChangeEmailVerificationAction {
  id       String @id @default(uuid()) @db.Uuid

  userId String @db.Uuid
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  verificationId String              @db.Uuid @unique
  verification   PendingVerification @relation(fields: [verificationId], references: [id], onDelete: Cascade)
}
