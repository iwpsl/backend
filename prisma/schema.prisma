generator client {
  provider = "prisma-client-js"
}

generator erd {
  provider = "prisma-erd-generator"
  output   = "../docs/erd.svg"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  user
  admin
}

enum AuthType {
  email
  firebase
}

model User {
  id           String   @id @default(uuid()) @db.Uuid
  email        String   @unique
  authType     AuthType
  password     String?
  role         Role     @default(user)
  isVerified   Boolean  @default(false)
  tokenVersion Int      @default(0)

  profile       Profile?
  calorie       CalorieHeader[]
  calorieEntry  CalorieEntry[]
  calorieTarget CalorieTarget[]
  water         WaterEntry[]
  waterTarget   WaterTarget[]
  step          StepEntry[]
  stepTarget    StepTarget[]
  fasting       FastingEntry[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Gender {
  male
  female
}

model Profile {
  id          String   @id @default(uuid()) @db.Uuid
  name        String
  dateOfBirth DateTime
  gender      Gender
  heightCm    Int
  weightKg    Int

  userId String @unique @db.Uuid
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum MealType {
  breakfast
  lunch
  dinner
  snack
}

model CalorieTarget {
  id         String @id @default(uuid()) @db.Uuid
  energyKcal Int

  userId String @db.Uuid
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  headers CalorieHeader[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model CalorieHeader {
  id   String   @id @default(uuid()) @db.Uuid
  date DateTime

  userId String @db.Uuid
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  targetId String        @db.Uuid
  target   CalorieTarget @relation(fields: [targetId], references: [id], onDelete: Cascade)

  entries CalorieEntry[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@unique([userId, date])
}

model CalorieEntry {
  id             String   @id @default(uuid()) @db.Uuid
  date           DateTime
  food           String
  portion        Float
  mealType       MealType
  energyKcal     Int
  proteinGr      Int
  carbohydrateGr Int
  fatGr          Int
  sugarGr        Int
  sodiumMg       Int

  userId String @db.Uuid
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  headerId String        @db.Uuid
  header   CalorieHeader @relation(fields: [headerId], references: [id], onDelete: Cascade)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model WaterTarget {
  id       String @id @default(uuid()) @db.Uuid
  amountMl Int

  userId String @db.Uuid
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  entries WaterEntry[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model WaterEntry {
  id       String   @id @default(uuid()) @db.Uuid
  date     DateTime
  amountMl Int

  userId String @db.Uuid
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  targetId String      @db.Uuid
  target   WaterTarget @relation(fields: [targetId], references: [id], onDelete: Cascade)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@unique([userId, date])
}

model StepTarget {
  id    String @id @default(uuid()) @db.Uuid
  steps Int

  userId String @db.Uuid
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  entries StepEntry[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model StepEntry {
  id    String   @id @default(uuid()) @db.Uuid
  date  DateTime @default(now())
  steps Int

  userId String @db.Uuid
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  targetId String     @db.Uuid
  target   StepTarget @relation(fields: [targetId], references: [id], onDelete: Cascade)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@unique([userId, date])
}

enum FastingCategory {
  fast16eat08
  fast18eat06
  fast14eat10
  fast12eat12
  fast13eat11
  fast15eat09
  custom
}

model FastingEntry {
  id         String          @id @default(uuid()) @db.Uuid
  category   FastingCategory
  startTime  DateTime
  endTime    DateTime
  finishedAt DateTime?

  userId String @db.Uuid
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

enum VerificationAction {
  signup
  resetPassword
}

model PendingVerification {
  id     String             @id @default(uuid()) @db.Uuid
  email  String             @unique
  code   String
  action VerificationAction

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
